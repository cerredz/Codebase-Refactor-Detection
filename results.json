[{"regions": {"file1": "    else:\n        # Binary case\n        probs = model.predict_proba(X_test)[:, 1]\n        decision_values = model.decision_function(X_test)\n    \n    # Sort for a smooth curve\n    sorted_idx = np.argsort(decision_values)\n    sorted_decision = decision_values[sorted_idx]\n    sorted_probs = probs[sorted_idx]\n    \n    # Create figure\n    plt.figure(figsize=(10, 6))\n    plt.plot(sorted_decision, sorted_probs, 'y-', linewidth=3)\n    \n    # Draw horizontal and vertical lines for a specific probability threshold (0.75)\n    threshold_prob = 0.75\n    # Find closest point to threshold_prob\n    idx = np.abs(sorted_probs - threshold_prob).argmin()\n    threshold_decision = sorted_decision[idx]\n    \n    # Draw lines\n    plt.axhline(y=threshold_prob, color='y', linestyle='--', alpha=0.7)\n    plt.axvline(x=threshold_decision, color='y', linestyle='--', alpha=0.7)\n    plt.plot(threshold_decision, threshold_prob, 'yo', markersize=8)\n    \n    # Add text\n    plt.text(threshold_decision + 0.5, threshold_prob, str(threshold_prob), \n             color='yellow', fontsize=14, verticalalignment='center')\n    \n    # Set axis limits and labels\n    plt.xlim(sorted_decision.min() - 1, sorted_decision.max() + 1)\n    plt.ylim(-0.05, 1.05)\n    plt.xlabel('Decision Function Value (Log-odds)', color='white')\n    plt.ylabel('Probability', color='white')\n    plt.title(f'Logistic Regression Curve for Class {class_of_interest}', color='white')\n    \n    # Set background color to black\n    plt.gca().set_facecolor('black')\n    fig = plt.gcf()\n    fig.patch.set_facecolor('black')\n    \n    # Set ticks and grid colors\n    plt.tick_params(colors='white')\n    for spine in plt.gca().spines.values():\n        spine.set_color('white')\n    \n    # Add reference lines\n    plt.axhline(y=1, color='white', linestyle='dotted', alpha=0.5)\n    plt.axhline(y=0, color='white', linestyle='dotted', alpha=0.5)\n", "file2": "    else:\n        probs = model.predict_proba(X_test)[:, 1]\n        decision_values = model.decision_function(X_test)\n    \n    sorted_idx = np.argsort(decision_values)\n    sorted_decision = decision_values[sorted_idx]\n    sorted_probs = probs[sorted_idx]\n    \n    plt.figure(figsize=(10, 6))\n    plt.plot(sorted_decision, sorted_probs, 'y-', linewidth=3)\n    \n    threshold_prob = 0.75\n    idx = np.abs(sorted_probs - threshold_prob).argmin()\n    threshold_decision = sorted_decision[idx]\n    \n    plt.axhline(y=threshold_prob, color='y', linestyle='--', alpha=0.7)\n    plt.axvline(x=threshold_decision, color='y', linestyle='--', alpha=0.7)\n    plt.plot(threshold_decision, threshold_prob, 'yo', markersize=8)\n    \n    plt.text(threshold_decision + 0.5, threshold_prob, str(threshold_prob), \n             color='yellow', fontsize=14, verticalalignment='center')\n    \n    plt.xlim(sorted_decision.min() - 1, sorted_decision.max() + 1)\n    plt.ylim(-0.05, 1.05)\n    plt.xlabel('Decision Function Value (Log-odds)', color='white')\n    plt.ylabel('Probability', color='white')\n    plt.title(f'Improved Logistic Regression Curve for Class {class_of_interest}', color='white')\n    \n    plt.gca().set_facecolor('black')\n    fig = plt.gcf()\n    fig.patch.set_facecolor('black')\n    \n    plt.tick_params(colors='white')\n    for spine in plt.gca().spines.values():\n        spine.set_color('white')\n    \n    plt.axhline(y=1, color='white', linestyle='dotted', alpha=0.5)\n    plt.axhline(y=0, color='white', linestyle='dotted', alpha=0.5)\n"}, "file1": "C:\\Users\\422mi\\refactor-analyzer\\codebase\\logistic-regression.py", "file2": "C:\\Users\\422mi\\refactor-analyzer\\codebase\\claude-log-red.py"}, {"regions": {"file1": "    os.makedirs('../visualizations', exist_ok=True)\n    \n    if len(np.unique(Y_test)) > 2:\n        probs = model.predict_proba(X_test)[:, class_of_interest]\n        if hasattr(model, 'decision_function'):\n            decision_values = model.decision_function(X_test)\n            if decision_values.ndim > 1:\n                decision_values = decision_values[:, class_of_interest]\n        else:\n", "file2": "    os.makedirs('../visualizations', exist_ok=True)\n    \n    # For multiclass, we'll focus on the probability of one class\n    if len(np.unique(Y_test)) > 2:\n        # Get probability estimates for the class of interest\n        probs = model.predict_proba(X_test)[:, class_of_interest]\n        \n        # Get the decision values (log-odds)\n        if hasattr(model, 'decision_function'):\n            decision_values = model.decision_function(X_test)\n            # For multiclass, choose the column corresponding to class_of_interest\n            if decision_values.ndim > 1:\n                decision_values = decision_values[:, class_of_interest]\n        else:\n"}, "file1": "C:\\Users\\422mi\\refactor-analyzer\\codebase\\claude-log-red.py", "file2": "C:\\Users\\422mi\\refactor-analyzer\\codebase\\logistic-regression.py"}, {"regions": {"file1": "        end_time = time.time()\n        \n        results[algorithm.name()] = {\n            'time': end_time - start_time,\n            'result': result,\n            'found': result.found,\n            'index': result.index,\n            'comparisons': result.comparisons,\n            'iterations': result.iterations\n        }\n    \n    return results\n", "file2": "        end_time = time.time()\n        \n        results[algorithm.name()] = {\n            'time': end_time - start_time,\n            'result': sorted_arr\n        }\n    \n    return results\n"}, "file1": "C:\\Users\\422mi\\refactor-analyzer\\codebase\\algorithms\\searching.py", "file2": "C:\\Users\\422mi\\refactor-analyzer\\codebase\\algorithms\\sorting.py"}, {"regions": {"file1": "    accuracy = accuracy_score(Y_test, y_pred)\n    print(f\"Accuracy: {accuracy:.4f}\")\n\n    print(\"\\nClassification Report:\")\n    print(classification_report(Y_test, y_pred))\n\n    print(\"\\nConfusion Matrix:\")\n    print(confusion_matrix(Y_test, y_pred))\n\n    # Create visualization\n    for class_idx in range(len(model.classes_)):\n", "file2": "    accuracy = accuracy_score(Y_test, y_pred)\n    print(f\"Accuracy: {accuracy:.4f}\")\n\n    print(\"\\nClassification Report:\")\n    print(classification_report(Y_test, y_pred))\n\n    print(\"\\nConfusion Matrix:\")\n    print(confusion_matrix(Y_test, y_pred))\n\n    # Create visualization\n    for class_idx in range(len(model.classes_)):\n"}, "file1": "C:\\Users\\422mi\\refactor-analyzer\\codebase\\svm.py", "file2": "C:\\Users\\422mi\\refactor-analyzer\\codebase\\logistic-regression.py"}]